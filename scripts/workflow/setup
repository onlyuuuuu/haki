#!/bin/bash

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
echo "Location of [$(basename "${BASH_SOURCE[0]}")] is: $SCRIPT_DIR"

echo 0 | sudo -S mkdir -p /usr/local/bin/
echo 0 | sudo -S chmod -R 777 /usr/local/bin/

echo 0 | sudo -S mkdir -p /tools > /dev/null 2>&1
echo 0 | sudo -S chown -R $USER:"$(id -g -n)" /tools > /dev/null 2>&1
mkdir -p ~/.config/catppuccin

if [[ "$(uname -a)" == *"Darwin"* ]]; then
    brew update && brew upgrade
    brew install zsh > /dev/null 2>&1
    brew install vim > /dev/null 2>&1
    brew install neovim > /dev/null 2>&1
    brew install fzf > /dev/null 2>&1
    brew install tmux > /dev/null 2>&1
    brew install bat > /dev/null 2>&1
    brew install lua > /dev/null 2>&1
    brew install zoxide > /dev/null 2>&1
    brew install exa > /dev/null 2>&1
    brew install eza > /dev/null 2>&1
    if [[ ! -d ~/.config/catppuccin/Terminal.app ]]; then
      echo "Installing themes for Terminal.app"
      cd ~/.config/catppuccin/
      git clone --depth 1 https://github.com/catppuccin/Terminal.app.git
      echo "Catppuccin Terminal.app themes have been downloaded at ~/.config/catppuccin/Terminal.app, install your favorite theme if you wish to."
      echo "For more details, please visit https://github.com/catppuccin/Terminal.app"
    fi
else
    echo 0 | sudo -S apt update -y
    echo 0 | sudo -S apt -o APT::Get::Always-Include-Phased-Updates=true upgrade -y
    echo 0 | sudo -S apt autoremove -y
    echo 0 | sudo -S apt install zsh vim neovim fzf tmux bat lua5.4 -y
    echo 0 | sudo -S apt install eza -y > /dev/null 2>&1
    echo 0 | sudo -S apt install exa -y > /dev/null 2>&1
    if [[ ! -f ~/.config/catppuccin/.gnome-themes-installed && "$(uname -a)" != *WSL* ]]; then
      curl -L https://raw.githubusercontent.com/catppuccin/gnome-terminal/v1.0.0/install.py | python3 - && touch ~/.config/catppuccin/.gnome-themes-installed && echo "Themes installed..." > ~/.config/catppuccin/.gnome-themes-installed 
    fi
fi

first_pull=false
if [[ ! -d /tools/neovim ]]; then
  echo "Compiling and installing NeoVim from source"
  cd /tools/
  git clone --depth 1 https://github.com/neovim/neovim.git
  first_pull=true
fi

cd /tools/neovim/
# Compare the local and remote HEAD commits
$SCRIPT_DIR/checkForUpdates.sh /tools/neovim
status_code=$?
if [[ "$status_code" == 0 && $first_pull == false ]]; then
  echo "NeoVim source is at the latest, no need to do anything..."
else
  echo "Pulling in latest changes from NeoVim and installing it now..."
  git pull
  echo 0 | sudo -S make CMAKE_BUILD_TYPE=RelWithDebInfo
  echo 0 | sudo -S make install
  echo 0 | sudo -S rm -rf build/ .deps/
  echo 0 | sudo -S make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_EXTRA_FLAGS="-DCMAKE_INSTALL_PREFIX=/tools/neovim"
  echo 0 | sudo -S make install
fi

first_pull=false
if [[ ! -d /tools/tmux ]]; then
  echo "Compiling and installing TMUX from source"
  cd /tools/
  git clone --depth 1 https://github.com/tmux/tmux.git
  first_pull=true
fi

cd /tools/tmux
# Compare the local and remote HEAD commits
$SCRIPT_DIR/checkForUpdates.sh /tools/tmux
status_code=$?
if [[ "$status_code" == 0 && $first_pull == false ]]; then
  echo "TMUX source is at the latest, no need to do anything..."
else
  echo "Pulling in latest changes from TMUX and installing it now..."
  git pull
  sh autogen.sh
  if [[ "$(uname -a)" == *"Darwin"* ]]; then
    ./configure --enable-utf8proc
  else
    ./configure
  fi
  make -j$(nproc)
  echo 0 | sudo -S make -j$(nproc) install
fi

first_pull=false
if [[ ! -d /tools/tmux-3.5a ]]; then
  echo "Compiling and installing TMUX 3.5a from source"
  cd /tools/
  git clone -b tmux-3.5a --depth 1 https://github.com/tmux/tmux.git tmux-3.5a
  first_pull=true
fi

cd /tools/tmux-3.5a
# Compare the local and remote HEAD commits
$SCRIPT_DIR/checkForUpdates.sh /tools/tmux-3.5a
status_code=$?
if [[ "$status_code" == 0 && $first_pull == false ]]; then
  echo "TMUX 3.5a source is at the latest, no need to do anything..."
else
  echo "Pulling in latest changes from TMUX 3.5a and installing it now..."
  git pull
  sh autogen.sh
  if [[ "$(uname -a)" == *"Darwin"* ]]; then
    ./configure --enable-utf8proc
  else
    ./configure
  fi
  make -j$(nproc)
  echo 0 | sudo -S make -j$(nproc) install
fi

first_pull=false
if [[ ! -d /tools/perl-source ]]; then
  echo "Installing Perl from source"
  cd /tools/
  git clone --depth 1 https://github.com/Perl/perl5.git perl-source
  first_pull=true
fi

cd /tools/perl-source
# Compare the local and remote HEAD commits
$SCRIPT_DIR/checkForUpdates.sh /tools/perl-source
status_code=$?
if [[ "$status_code" == 0 && $first_pull == false ]]; then
  echo "Perl source is at the latest, no need to do anything..."
else
  echo "Pulling in latest changes from Perl and installing it now..."
  #git pull
  #./Configure -des -Dprefix=$HOME/perl5dev -Dusedevel
  #make -j$(nproc) test
  #echo 0 | sudo -S make -j$(nproc) install
fi

#PATH="$HOME/perl5dev/bin${PATH:+:${PATH}}"; export PATH;
#PERL5LIB="$HOME/perl5dev/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
#PERL_LOCAL_LIB_ROOT="$HOME/perl5dev${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
#PERL_MB_OPT="--install_base \"$HOME/perl5dev\""; export PERL_MB_OPT;
#PERL_MM_OPT="INSTALL_BASE=$HOME/perl5dev"; export PERL_MM_OPT;

first_pull=false
if [[ ! -d /tools/rainbarf ]]; then
  cd /tools/
  git clone --depth 1 https://github.com/creaktive/rainbarf.git
  first_pull=true
fi

cd /tools/rainbarf/
# Compare the local and remote HEAD commits
$SCRIPT_DIR/checkForUpdates.sh /tools/rainbarf
status_code=$?
if [[ "$status_code" == 0 && $first_pull == false ]]; then
  echo "Rainbarf source is at the latest, no need to do anything..."
else
  echo "Pulling in latest changes from Rainbarf and installing it now..."
  git pull
  cpan --version
  cpan Module::Build
  cpan -i App::cpanminus
  cpan -i App::rainbarf
  cpanm git://github.com/creaktive/rainbarf.git
  perl Build.PL
  ./Build test
  ./Build install
  echo 0 | sudo -S ./Build install
  
  # Retry with root, just in case
  cpan --version
  echo 0 | sudo -S cpan Module::Build
  echo 0 | sudo -S cpan -i App::cpanminus
  echo 0 | sudo -S cpan -i App::rainbarf
  echo 0 | sudo -S cpanm git://github.com/creaktive/rainbarf.git
  echo 0 | sudo -S perl Build.PL
  echo 0 | sudo -S ./Build test
  echo 0 | sudo -S ./Build install
fi

cd ~/.config/catppuccin

first_pull=false
if [[ ! -d ~/.config/catppuccin/nerd-fonts ]]; then
  echo "Installing Nerd Fonts"
  git clone --depth 1 https://github.com/ryanoasis/nerd-fonts.git
  first_pull=true
fi

cd ~/.config/catppuccin/nerd-fonts
# Compare the local and remote HEAD commits
#$SCRIPT_DIR/checkForUpdates.sh ~/.config/catppuccin/nerd-fonts
#status_code=$?
#if [[ "$status_code" == 0 && $first_pull == false ]]; then
#  echo "Catppuccin Nerd Fonts is up-to-date. No need to pull or build."
#else
#  echo "Pulling in latest changes from Catppuccin and installing it now..."
#  git pull
#  ./install.sh
#fi

first_install=false
if command -v starship > /dev/null 2>&1; then
  echo "Starship already installed, skipping further operations..."
else  
  echo "Installing Starship"
  yes | curl -sS https://starship.rs/install.sh | sh
  first_install=true
fi

if [[ $first_install == false && $1 == "--force" ]]; then
  echo "Force installing Starship"
  yes | curl -sS https://starship.rs/install.sh | sh  
fi

if [[ ! -d ~/.oh-my-zsh ]]; then
  echo "Installing Oh My Zsh"
  sh -c "$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
fi

eval "$(zoxide init zsh)" > /dev/null 2>&1
source "$HOME/.sdkman/bin/sdkman-init.sh" > /dev/null 2>&1

first_install=false
if command -v z > /dev/null 2>&1; then
  echo "Zoxide already installed, skipping further operations..."
else
  echo "Installing Zoxide"
  curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh
  first_install=true
fi

if [[ $first_install == false && $1 == "--force" ]]; then
  curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh  
fi

if command -v sdk > /dev/null 2>&1; then
  echo "SDKMAN is already installed, skipping further operations..."
else
  echo "Installing SDKMAN now..."
  curl -s "https://get.sdkman.io" | bash 
fi

if [[ ! -d ~/.config/btop-catppuccin ]]; then
  echo "Installing themes for Btop++"
  cd ~/.config/
  mv btop btop-old
  git clone --depth 1 https://github.com/catppuccin/btop.git btop-catppuccin
  unlink btop > /dev/null 2>&1
  ln -sf ~/.config/btop-catppuccin btop
fi

cd ~/.config/btop-catppuccin
git pull

#if [[ ! -d  ~/.config/tmux/plugins/catppuccin/tmux ]]; then
#  mkdir -p ~/.config/tmux/plugins/catppuccin/
#  git clone --depth 1 https://github.com/catppuccin/tmux.git ~/.config/tmux/plugins/catppuccin/tmux
#fi

#cd ~/.config/tmux/plugins/catppuccin/tmux
#git pull origin main

if [[ ! -d ~/.tmux/plugins/tpm ]]; then
  git clone --depth 1 https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
fi

cd ~/.tmux/plugins/tpm
git pull

if [[ ! -d ~/.config/nvim/pack/nvim/start/nvim-lspconfig ]]; then
  echo "Installing nvim-lspconfig"
  git clone https://github.com/neovim/nvim-lspconfig ~/.config/nvim/pack/nvim/start/nvim-lspconfig
fi

#mkdir -p ~/.config/tmux-powerline
#if [[ ! -d ~/.config/tmux/plugins/tmux-powerline ]]; then
#  mkdir -p ~/.config/tmux/plugins/
#  cd ~/.config/tmux/plugins/
#  git clone --depth 1 https://github.com/erikw/tmux-powerline.git
#fi

# TMUX Powerline config
#cd ~/.config/tmux/plugins/tmux-powerline
#git pull
#chmod +x generate_config.sh
#./generate_config.sh
#if [[ ! -f ~/.config/tmux-powerline/config.sh ]]; then
#  echo "TMUX Powerline configuration is already present, not overwritting anything..."
#  mv ~/.config/tmux-powerline/config.sh.default ~/.config/tmux-powerline/config.sh
#  chmod +x ~/.config/tmux-powerline/config.sh
#fi

# TMUX Powerline theme
#if [[ ! -f ~/.config/tmux-powerline/themes/my-theme.sh ]]; then
#  mkdir -p ~/.config/tmux-powerline/themes
#  cp ~/.config/tmux/plugins/tmux-powerline/themes/default.sh ~/.config/tmux-powerline/themes/my-theme.sh
#  chmod +x ~/.config/tmux-powerline/themes/my-theme.sh
#fi

first_pull=false
if [[ ! -d /tools/eclipse.jdt.ls ]]; then
  echo "Installing Eclipse Java Language Server..."
  cd /tools/
  git clone --depth 1 https://github.com/eclipse-jdtls/eclipse.jdt.ls.git
  first_pull=true
fi

cd /tools/eclipse.jdt.ls/
# Compare the local and remote HEAD commits
$SCRIPT_DIR/checkForUpdates.sh /tools/eclipse.jdt.ls
status_code=$?
if [[ "$status_code" == 0 && $first_pull == false ]]; then
  echo "Eclipse JDT LS is up-to-date. No need to pull or build."
else
  echo "Updates available for Eclipse JDT LS. Pull and build recommended."
  echo "Local HEAD:  $LOCAL_HEAD"
  echo "Remote HEAD: $REMOTE_HEAD"
  git pull
  echo Y | sdk install java 24.0.2-open
  echo Y | sdk default java 24.0.2-open
  if [[ "$(uname -a)" == *"Darwin"* ]]; then
    #echo 0 | sudo -S -u onlyu nice -20 JAVA_HOME="$HOME/.sdkman/candidates/java/current"; ./mvnw -T "$(nproc)" clean verify -U -DskipTests=true &
    echo 0 | sudo -S -u onlyu nice -20 JAVA_HOME="$HOME/.sdkman/candidates/java/current"; ./mvnw -T 1 clean verify -U -DskipTests=true &
    pid=$!
    echo 0 | sudo -S taskpolicy -b -p $pid
    wait $pid
  else
    #echo 0 | sudo -S -u zero nice -20 JAVA_HOME="$HOME/.sdkman/candidates/java/current"; ./mvnw -T "$(nproc)" clean verify -U -DskipTests=true
    echo 0 | sudo -S -u zero nice -20 JAVA_HOME="$HOME/.sdkman/candidates/java/current"; ./mvnw -T 1 clean verify -U -DskipTests=true
  fi
  ln -sf "$(pwd)"/org.eclipse.jdt.ls.product/target/repository /tools/eclipse-java-ls
fi

# Install fzf manually
first_pull=false
if [[ ! -d ~/.fzf ]]; then
  echo "Installing Fuzzy Finder from scratch..."
  cd ~
  git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
  first_pull=true
fi

cd ~/.fzf
# Compare the local and remote HEAD commits
$SCRIPT_DIR/checkForUpdates.sh ~/.fzf
status_code=$?
if [[ "$status_code" == 0 && $first_pull == false ]]; then
  echo "Fuzzy Finder is up-to-date. No need to pull or build."
else
  echo "Updates available for Fuzzy Finder. Pull and build recommended."
  echo "Local HEAD:  $LOCAL_HEAD"
  echo "Remote HEAD: $REMOTE_HEAD"
  git pull
  ~/.fzf/install
fi

ln -sf ~/.fzf/ /tools/.fzf

# Install NeoVim Telescope FZF Plugin manually
first_pull=false
if [[ ! -d ~/.local/share/nvim/lazy/telescope-fzf-native.nvim ]]; then
  echo "Installing NeoVim Telescope FZF Plugin from scratch..."
  cd ~/.local/share/nvim/lazy/
  git clone --depth 1 https://github.com/nvim-telescope/telescope-fzf-native.nvim.git
  first_pull=true
fi

cd ~/.local/share/nvim/lazy/telescope-fzf-native.nvim
git pull
rm -rf build/
make
# # Compare the local and remote HEAD commits
# $SCRIPT_DIR/checkForUpdates.sh ~/.local/share/nvim/lazy/telescope-fzf-native.nvim
# status_code=$?
# if [[ "$status_code" == 0 && $first_pull == false ]]; then
#   echo "NeoVim Telescope FZF Plugin is up-to-date. No need to pull."
# else
#   echo "Updates available for NeoVim Telescope FZF Plugin. Pull and build recommended."
#   echo "Local HEAD:  $LOCAL_HEAD"
#   echo "Remote HEAD: $REMOTE_HEAD"
#   git pull
#   make
# fi

cd $SCRIPT_DIR

cp -rf aliases.zsh2 ~/
cp -rf .bash_aliases2 ~/
cp -rf .config ~/
cp -rf .tmux ~/
if [[ "$(uname -a)" == *"Linux"*"Microsoft"* ]]; then
  #cp -rf .tmux.wsl.conf ~/.tmux.conf
  cp -rf .tmux.conf ~/
else
  cp -rf .tmux.conf ~/
fi
cp -rf .rainbarf.conf ~/
cp -rf .vimrc ~/
cp -rf .warp ~/
cp -rf .zprofile2 ~/
cp -rf .zshrc2 ~/
cp -rf .fzf.zsh2 ~/
mkdir -p ${XDG_DATA_HOME:-$HOME/.local/share}/warp-terminal/themes/
cp -rf .warp/themes/* ${XDG_DATA_HOME:-$HOME/.local/share}/warp-terminal/themes/
echo 0 | sudo -S mkdir -p /c/Users/duyan/AppData/Roaming/warp/Warp/data/themes > /dev/null 2>&1
echo 0 | sudo -S cp -rf .warp/themes/* /c/Users/duyan/AppData/Roaming/warp/Warp/data/themes/ > /dev/null 2>&1
echo 0 | sudo -S mkdir -p /c/Users/onlyu/AppData/Roaming/warp/Warp/data/themes > /dev/null 2>&1
echo 0 | sudo -S cp -rf .warp/themes/* /c/Users/onlyu/AppData/Roaming/warp/Warp/data/themes/ > /dev/null 2>&1

if [[ ! -f ~/.bash_profile ]]; then
  touch ~/.bash_profile
  echo ". ~/.bashrc > /dev/null 2>&1" > ~/.bash_profile
  echo "" > ~/.bash_profile
fi

if [[ -z "$(grep -i '. ~/.bash_profile > /dev/null 2>&1' ~/.zshrc)" ]]; then
  if [[ "$(uname -a)" == *"Darwin"* ]]; then
    gsed -i "1i . ~/.bash_profile > /dev/null 2>&1\\n" ~/.zshrc
  else
    sed -i "1i . ~/.bash_profile > /dev/null 2>&1\\n" ~/.zshrc
  fi
  echo "Sourcing ~/.bash_profile entry on ~/.zprofile2 has been added to ~/.zshrc"
else
  echo "Sourcing ~/.bash_profile entry on ~/.zprofile2 has already been added, skipping further writes..."
fi

if [[ -z "$(grep -i '. ~/.zprofile2 > /dev/null 2>&1' ~/.zshrc)" ]]; then
  echo "" >> ~/.zshrc
  echo ". ~/.zprofile2 > /dev/null 2>&1" >> ~/.zshrc
  echo "" >> ~/.zshrc
  echo "Sourcing ~/.zprofile2 entry on ~/.zprofile2 has been added to ~/.zshrc"
else
  echo "Sourcing ~/.zprofile2 entry on ~/.zprofile2 has already been added, skipping further writes..."
fi

if [[ "$(uname -a)" == *"Darwin"* ]]; then
  bat cache --build
else
  batcat cache --build
fi

echo -e "\nYou should now run this command \$[ source ~/.zshrc ]\n"

echo -e "\nFor TMUX, you might want to hit [prefix + I], then [prefix + U] (prefix is usually Ctrl + B, unless if you set it something else). For more info, visit [https://github.com/tmux-plugins/tpm]\n"
